name: Build & push containers
# "on push" includes merged pull requests

on:
  push:
    tags:
      - "testing-scheduler-v*.*.*"
      - "testing-starter-v*.*.*"
      - "testing-runner-v*.*.*"

      - "release-scheduler-v*.*.*"
      - "release-starter-v*.*.*"
      - "release-runner-v*.*.*"

jobs:

  init-vars:
    runs-on: ubuntu-latest
    outputs:
      git_tag_prefix: ${{ steps.extract_github_ref_prefix.outputs.prefix }}
      image_tag_prefix: ${{ steps.extract_github_ref_prefix.outputs.prefix }}
      component: ${{ steps.extract_github_ref_component.outputs.component }}
      version: ${{ steps.extract_github_ref_version.outputs.version }}
      short_sha: ${{ steps.get_commit.outputs.short_sha }}
    steps:
      # vaildate github.ref format in case of others triggers used
      - id: validate_github_ref
        run: |
          if [[ ! "${{ github.ref }}" =~ ^refs/tags/(testing|release)-(scheduler|runner|starter)-v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Invalid github.ref format"
            exit 1
          fi
      # extract git_tag_prefix, component and version from github.ref
      - id: extract_github_ref_prefix
        run: echo "git_tag_prefix=$(echo ${{ github.ref }} | awk -F/ '{print $3}' | awk -Fv '{print $1}')" >> $GITHUB_OUTPUT
      - id: extract_github_ref_component
        run: echo "component=$(echo ${{ github.ref }} | awk -F/ '{print $3}' | awk -F- '{print $2}')" >> $GITHUB_OUTPUT
      - id: extract_github_ref_version
        run: echo "version=$(echo ${{ github.ref }} | awk -F/ '{print $3}' | awk -Fv '{print $2}')" >> $GITHUB_OUTPUT
      # set image_tag_prefix
      - id: set_image_tag_prefix
        run: |
          if [[ "${{ steps.extract_github_ref_prefix.outputs.git_tag_prefix }}" == "testing" ]]; then
            echo "image_tag_prefix=testing-" >> $GITHUB_OUTPUT
          elif [[ "${{ steps.extract_github_ref_prefix.outputs.git_tag_prefix }}" == "release" ]]; then
            echo "image_tag_prefix=" >> $GITHUB_OUTPUT
          fi
      # set short git commit sha
      - name: set short git commit sha
        id: get_commit
        run: echo "short_sha=$(git rev-parse --short ${{ github.sha }})" >> $GITHUB_OUTPUT

  # Generate Matrix with "testing" or "release" job depending on gitub.ref
  # matrix-init:
  #   runs-on: ubuntu-latest
  #   env:

  #     # set ref prefix
  #     ref-prefix-testing: refs/tags/testing
  #     ref-prefix-release: refs/tags/release

  #   outputs:
  #     matrix: ${{ steps.set-matrix.outputs.matrix }}
  #   steps:

  #     - id: extract_github_ref_prefix
  #       run: echo "github_ref_prefix=$(echo ${{ github.ref }} | awk -F/ '{print $3}' | awk -Fv '{print $1}')" >> $GITHUB_OUTPUT
  #     - id: extract_github_ref_component
  #       run: echo "github_ref_component=$(echo ${{ github.ref }} | awk -F/ '{print $3}' | awk -F- '{print $2}')" >> $GITHUB_OUTPUT

  #     - id: set-matrix
  #       run: |
  #         if [[ "${{ github.ref }}" == ${{ env.ref-prefix-testing }}* ]]; then
  #           dynamic_includes='[{"dockerfile": "./${{ steps.extract_github_ref_component.outputs.github_ref_component }}/Dockerfile", "image": "seatable/seatable-python-${{ steps.extract_github_ref_component.outputs.github_ref_component }}", "context": "${{ steps.extract_github_ref_component.outputs.github_ref_component }}", "version_prefix": "testing-"}]'
  #         elif [[ "${{ github.ref }}" == ${{ env.ref-prefix-release }}* ]]; then
  #           dynamic_includes='[{"dockerfile": "./${{ steps.extract_github_ref_component.outputs.github_ref_component }}/Dockerfile", "image": "seatable/seatable-python-${{ steps.extract_github_ref_component.outputs.github_ref_component }}", "context": "${{ steps.extract_github_ref_component.outputs.github_ref_component }}", "version_prefix": ""}]'
  #         fi
  #         echo "matrix={'include': $dynamic_includes}" >> $GITHUB_OUTPUT

  build-image-on-push:
    runs-on: ubuntu-latest
    needs:
#      - matrix-init
      - init-vars
    # strategy:
    #   fail-fast: false
    #   matrix: ${{ fromJson(needs.matrix-init.outputs.matrix) }}

    permissions:
      contents: read
      packages: write
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
      # - name: Set short git commit SHA
      #   id: get_commit
      #   run: echo "short_sha=$(git rev-parse --short ${{ needs.init-vars.outputs.short_sha }})" >> $GITHUB_OUTPUT
      # - id: extract_github_ref_version
      #   run: echo "version=$(echo ${{ github.ref }} | awk -F/ '{print $3}' | awk -Fv '{print $2}')" >> $GITHUB_OUTPUT
      # - id: extract_github_ref_component
      #   run: echo "github_ref_component=$(echo ${{ github.ref }} | awk -F/ '{print $3}' | awk -F- '{print $2}')" >> $GITHUB_OUTPUT
      # writes version file
      - name: Write version to file
        run: |
          echo "${{ needs.init-vars.outputs.version }}" > "${{ needs.init-vars.outputs.component }}/version"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push image
#        if: ${{ startsWith(github.ref, matrix.ref) }}
        uses: docker/build-push-action@v5
        with:
          context: ${{ needs.init-vars.outputs.component }}
          file: ${{ matrix.dockerfile }}
          push: true
          tags: |
            seatable/seatable-python-${{ needs.init-vars.outputs.component }}:build-${{ github.run_number }}
            seatable/seatable-python-${{ needs.init-vars.outputs.component }}:commit-${{ needs.init-vars.outputs.short_sha }}
            seatable/seatable-python-${{ needs.init-vars.outputs.component }}:${{ needs.init-vars.outputs.image_tag_prefix }}${{ needs.init-vars.outputs.version }}
          labels: |
            org.opencontainers.image.title=seatable/seatable-python-${{ needs.init-vars.outputs.component }}
            org.opencontainers.image.version=${{ needs.init-vars.outputs.image_tag_prefix }}${{ needs.init-vars.outputs.version }}
            org.opencontainers.image.revision=${{ needs.init-vars.outputs.short_sha }}
            org.opencontainers.image.created=${{ github.event.release.published_at }}
            org.opencontainers.image.authors=SeaTable
            org.opencontainers.image.url=https://www.seatable.io/
            org.opencontainers.image.documentation=https://admin.seatable.io/
            org.opencontainers.image.vendor=SeaTable
