name: Cron docker scout image scan

on:

  # schedule:
  #   - cron: '0 0 * * *' # Runs every day at 00:00 GMT

  workflow_dispatch:

jobs:
  scan:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        docker_image: ['seatable-python-runner', 'seatable-python-scheduler', 'seatable-python-starter']

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Fetch and sort Docker tags
      id: get_digests
      env:
        DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}
        DOCKER_NAMESPACE: seatable
        DOCKER_REPOSITORY: ${{ matrix.docker_image }}
        NAME_REPO: ${{ env.DOCKER_NAMESPACE }}/${{ matrix.docker_image }}
      run: |
        # Get Bearer Token
        payload=$(jq -n --arg u "$DOCKERHUB_USERNAME" --arg p "$DOCKERHUB_PASSWORD" '{username: $u, password: $p}')
        token=$(curl -s -H "Content-Type: application/json" -X POST -d "$payload" https://hub.docker.com/v2/users/login | jq -r .token)

        # Use token to make repo tag list API call / pagianted, we only care about the first page
        tag_list=$(curl -s -H "Authorization: Bearer $token" https://hub.docker.com/v2/namespaces/$DOCKER_NAMESPACE/repositories/$DOCKER_REPOSITORY/tags)

        # Filter for unique digests and prefix with repo and image name / without "unique" to keep the order of the list (sorted by last date pushed)
        digests=$(echo $tag_list | jq -r '[ .results[] | .digest ] | map({key:.,value:1}) | from_entries | keys_unsorted | join(" ")')

        echo "digests: $digests"

        prefixed_digests=""
        for digest in $digests; do
          prefixed_digests+="$NAME_REPO@$digest "
        done

        echo "prefixed_digests: $prefixed_digest"
        echo "prefixed_digests=${prefixed_digests}" >> $GITHUB_OUTPUT

      shell: bash


    - name: Print output value
      run: echo "The output value is ${{ steps.get_digests.outputs.prefixed_digests }}"


    # The trivy Github Action does not support scanning multiple images, so we use the
    # official Trivy image instead, override default entrypoint and run
    # Trivy for every container image in the list. Fail if any image has critical vulnerabilities.

    - name: Scan images for CRITICAL vulnerabilities
      id: trivy_scan
      uses: docker://ghcr.io/aquasecurity/trivy
      with:
        entrypoint: /bin/sh
        args: -c "trivy image --clear-cache; for img in ${{ steps.get_digests.outputs.prefixed_digests }}; do trivy image --exit-code 1 --severity CRITICAL --no-progress $img; done"