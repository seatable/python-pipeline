name: Cron docker scout image scan

on:

  # schedule:
  #   - cron: '0 0 * * *' # Runs every day at 00:00 GMT

  workflow_dispatch:

jobs:
  scan:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        docker_image: ['seatable/seatable-python-runner', 'seatable/seatable-python-scheduler', 'seatable/seatable-python-starter']

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Make API call
      run: |
        curl -H "Authorization: Bearer ${{ secrets.API_KEY }}" https://api.example.com/data


    - name: Fetch and sort Docker tags
      id: get_digests
      env:
        DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
      run: |
        namespace='seatable'
        repository='${{ matrix.docker_image }}'

        # Login and get token
        auth_response=$(curl -s -H "Content-Type: application/json" -X POST -d '{"username": "'"$DOCKERHUB_USERNAME"'", "password": "'"$DOCKERHUB_PASSWORD"'"}' https://hub.docker.com/v2/users/login)
        token=$(echo $auth_response | jq -r .token)

        # Use token to make API call / pagianted, we only care about the first page
        tag_list=$(curl -s -H "Authorization: Bearer $token" https://hub.docker.com/v2/namespaces/$namespace/repositories/$repository/tags)

        # Intermediate Step / defacto debug / Print tag_list with jq
        tag_list_short=$(echo $tag_list | jq '[.results[] | {
            digest: .digest,
            name: .name,
            tag_last_pushed: .tag_last_pushed,
            tag_last_pulled: .tag_last_pulled,
            last_updated: .last_updated,
            last_updater: .last_updater,
            last_updater_username: .last_updater_username
        }]')

        # Unique digest, without "unique" to keep the order of the list (sorted by last date pushed)
        echo "digests=$(echo $tag_list_short | jq -r '[ .[] | .digest ] | map({key:.,value:1}) | from_entries | keys_unsorted | join(" ")')" >> $GITHUB_OUTPUT

      shell: bash



    # # The trivy Github Action does not support scanning multiple images, so we use the
    # # official Trivy image instead, override default entrypoint and run
    # # Trivy for every container image in the list. Fail if any image has vulnerabilities.
    # - name: Scan images for CRITICAL vulnerabilities
    #   uses: docker://ghcr.io/aquasecurity/trivy
    #   with:
    #     entrypoint: /bin/sh
    #     args: -c "trivy image --clear-cache; for img in ${{ steps.get_digests.outputs.digests }}; do trivy image --exit-code 1 --severity CRITICAL --no-progress $img; done"

